/**
 * SpaceX REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";
import {decode as atob, encode as btoa} from 'base-64'

import { Launch } from '../model/launch';

import { COLLECTION_FORMATS }  from '../variables';



export class DefaultService {
    private basePath: string = 'https://localhost';

    constructor(private httpClient: IHttpClient,
        private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * 
     * @param find 
     * @param limit 
     * @param offset 
     * @param order 
     * @param sort 
     
     */
    public launchesQuery(find?: any, limit?: any, offset?: any, order?: any, sort?: any, observe?: 'body', headers?: Headers): Observable<Array<Launch>>;
    public launchesQuery(find?: any, limit?: any, offset?: any, order?: any, sort?: any, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Launch>>>;
    public launchesQuery(find?: any, limit?: any, offset?: any, order?: any, sort?: any, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (find !== undefined) {
            queryParameters.push("find="+encodeURIComponent(String(find)));
        }
        if (limit !== undefined) {
            queryParameters.push("limit="+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push("offset="+encodeURIComponent(String(offset)));
        }
        if (order !== undefined) {
            queryParameters.push("order="+encodeURIComponent(String(order)));
        }
        if (sort !== undefined) {
            queryParameters.push("sort="+encodeURIComponent(String(sort)));
        }

        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = "Basic " + btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Launch>>> = this.httpClient.get(`${this.basePath}/launches?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<Launch>>(httpResponse.response));
        }
        return response;
    }

}
